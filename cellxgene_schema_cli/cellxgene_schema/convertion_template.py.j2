import anndata as ad

from . import utils


def convert(input_file, output_file, collection_id, dataset_id):
    print(f"Converting {input_file} into {output_file}")

    dataset = ad.read_h5ad(input_file)

    # Set schema version
    dataset.uns["schema_version"] = {% schema_version %}

    # ONTOLOGY TERMS TO UPDATE ACROSS ALL DATASETS IN CORPUS
    # Initialization is AUTOMATED for newly deprecated terms that have 'Replaced By' terms in their ontology files

    # Curators should review the monthly 'Curator Report' and add deprecated term replacements to corresponding map if
    # 'Replaced By' is not available for a deprecated term.

    # If Curators have non-deprecated term changes to apply to all datasets in the corpus where applicable,
    # add them here.
    ontology_term_maps = {
        "assay": {
            {% for assay in assay_ontology_update_map %}
            "{{ assay }}": "{{ assay_ontology_update_map[assay] }}", # AUTOMATED
            {% endfor %}
        },
        "cell_type": {
            {% for cell_type in cell_type_ontology_update_map %}
            "{{ cell_type }}": "{{ cell_type_ontology_update_map[cell_type] }}", # AUTOMATED
            {% endfor %}
        },
        "development_stage": {},
        "disease": {
            {% for disease in disease_ontology_update_map %}
            "{{ disease }}": "{{ disease_ontology_update_map[disease] }}", # AUTOMATED
            {% endfor %}
        },
        "organism": {
            {% for organism in organism_ontology_update_map %}
    "{{ organism }}": "{{ organism_ontology_update_map[organism] }}",  # AUTOMATED
    {% endfor %}
        },
        "self_reported_ethnicity": {
            {% for self_reported_ethnicity in self_reported_ethnicity_ontology_update_map %}
            "{{ self_reported_ethnicity }}": "{{ self_reported_ethnicity_ontology_update_map[self_reported_ethnicity] }}",  # AUTOMATED
            {% endfor %}
        },
        "sex": {
            {% for sex in sex_ontology_update_map %}
            "{{ sex }}": "{{ sex_ontology_update_map[sex] }}",  # AUTOMATED
            {% endfor %}
        },
        "tissue": {
            {% for tissue in tissue_ontology_update_map %}
            "{{ tissue }}": "{{ tissue_ontology_update_map[tissue] }}",  # AUTOMATED
            {% endfor %}
        },
    }

    # AUTOMATED, DO NOT CHANGE
    for ontology_name, deprecated_term_map in ontology_term_maps.items():
        utils.replace_ontology_term(dataset.obs, ontology_name, deprecated_term_map)

    # CURATOR-DEFINED, DATASET-SPECIFIC UPDATES
    # Use the template below to define dataset and collection specific ontology changes. Will only apply to dataset
    # if it matches a condition.
    # If no such changes are needed, leave blank
    # Examples:
    # if dataset_id == "<dataset_1_id>":
    #   <no further logic necessary>
    #   utils.replace_ontology_term(df, <ontology_name>, {"term_to_replace": "replacement_term", ...})
    # elif dataset_id == "<dataset_2_id>":
    #   <custom transformation logic beyond scope of util functions>
    # elif collection_id == "<collection_1_id>":
    #   <no further logic necessary>
    #   utils.replace_ontology_term(df, <ontology_name>, {"term_to_replace": "replacement_term", ...})
    # elif collection_id == "<collection_2_id>":
    #   <custom transformation logic beyond scope of replace_ontology_term>
    # ...

    # AUTOMATED, DO NOT CHANGE -- IF GENCODE UPDATED, DEPRECATED FEATURE FILTERING ALGORITHM WILL GO HERE.

    dataset.write(output_file, compression="gzip")
